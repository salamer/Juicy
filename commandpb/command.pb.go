// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commandpb/command.proto

/*
Package Juicy is a generated protocol buffer package.

It is generated from these files:
	commandpb/command.proto

It has these top-level messages:
	CommandReq
	CommandResp
*/
package Juicy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandReq_Command int32

const (
	CommandReq_Set     CommandReq_Command = 0
	CommandReq_Get     CommandReq_Command = 1
	CommandReq_Have    CommandReq_Command = 2
	CommandReq_Empty   CommandReq_Command = 3
	CommandReq_Clear   CommandReq_Command = 4
	CommandReq_Delete  CommandReq_Command = 5
	CommandReq_Persist CommandReq_Command = 6
)

var CommandReq_Command_name = map[int32]string{
	0: "Set",
	1: "Get",
	2: "Have",
	3: "Empty",
	4: "Clear",
	5: "Delete",
	6: "Persist",
}
var CommandReq_Command_value = map[string]int32{
	"Set":     0,
	"Get":     1,
	"Have":    2,
	"Empty":   3,
	"Clear":   4,
	"Delete":  5,
	"Persist": 6,
}

func (x CommandReq_Command) String() string {
	return proto.EnumName(CommandReq_Command_name, int32(x))
}
func (CommandReq_Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type CommandReq struct {
	Command CommandReq_Command `protobuf:"varint,1,opt,name=command,enum=Juicy.CommandReq_Command" json:"command,omitempty"`
	Arg1    string             `protobuf:"bytes,2,opt,name=arg1" json:"arg1,omitempty"`
	Arg2    string             `protobuf:"bytes,3,opt,name=arg2" json:"arg2,omitempty"`
}

func (m *CommandReq) Reset()                    { *m = CommandReq{} }
func (m *CommandReq) String() string            { return proto.CompactTextString(m) }
func (*CommandReq) ProtoMessage()               {}
func (*CommandReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandReq) GetCommand() CommandReq_Command {
	if m != nil {
		return m.Command
	}
	return CommandReq_Set
}

func (m *CommandReq) GetArg1() string {
	if m != nil {
		return m.Arg1
	}
	return ""
}

func (m *CommandReq) GetArg2() string {
	if m != nil {
		return m.Arg2
	}
	return ""
}

type CommandResp struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Res1    bool   `protobuf:"varint,3,opt,name=res1" json:"res1,omitempty"`
	Res2    string `protobuf:"bytes,4,opt,name=res2" json:"res2,omitempty"`
}

func (m *CommandResp) Reset()                    { *m = CommandResp{} }
func (m *CommandResp) String() string            { return proto.CompactTextString(m) }
func (*CommandResp) ProtoMessage()               {}
func (*CommandResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CommandResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CommandResp) GetRes1() bool {
	if m != nil {
		return m.Res1
	}
	return false
}

func (m *CommandResp) GetRes2() string {
	if m != nil {
		return m.Res2
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandReq)(nil), "Juicy.CommandReq")
	proto.RegisterType((*CommandResp)(nil), "Juicy.CommandResp")
	proto.RegisterEnum("Juicy.CommandReq_Command", CommandReq_Command_name, CommandReq_Command_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DBCommand service

type DBCommandClient interface {
	CommandRPC(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*CommandResp, error)
}

type dBCommandClient struct {
	cc *grpc.ClientConn
}

func NewDBCommandClient(cc *grpc.ClientConn) DBCommandClient {
	return &dBCommandClient{cc}
}

func (c *dBCommandClient) CommandRPC(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*CommandResp, error) {
	out := new(CommandResp)
	err := grpc.Invoke(ctx, "/Juicy.DBCommand/CommandRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBCommand service

type DBCommandServer interface {
	CommandRPC(context.Context, *CommandReq) (*CommandResp, error)
}

func RegisterDBCommandServer(s *grpc.Server, srv DBCommandServer) {
	s.RegisterService(&_DBCommand_serviceDesc, srv)
}

func _DBCommand_CommandRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBCommandServer).CommandRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Juicy.DBCommand/CommandRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBCommandServer).CommandRPC(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Juicy.DBCommand",
	HandlerType: (*DBCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandRPC",
			Handler:    _DBCommand_CommandRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commandpb/command.proto",
}

func init() { proto.RegisterFile("commandpb/command.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x9b, 0xe6, 0xff, 0x16, 0x64, 0xbc, 0x08, 0x8e, 0xae, 0x4a, 0x56, 0x5d, 0x45, 0x3a,
	0xc5, 0x17, 0x68, 0x2a, 0x8a, 0xab, 0x12, 0x7d, 0x81, 0x34, 0x5e, 0xa4, 0xd0, 0x98, 0x71, 0x66,
	0x2a, 0xf4, 0xe9, 0x7c, 0x35, 0xc9, 0x64, 0x92, 0x82, 0xdd, 0x7d, 0xf7, 0xe4, 0x04, 0xbe, 0x39,
	0x70, 0x5b, 0xb7, 0x4d, 0x53, 0x7d, 0x7d, 0xc8, 0xdd, 0x83, 0xa3, 0x5c, 0xaa, 0xd6, 0xb4, 0x18,
	0xbe, 0x1e, 0xf7, 0xf5, 0x29, 0xfb, 0xf5, 0x00, 0x8a, 0xfe, 0x43, 0x49, 0xdf, 0xb8, 0x82, 0xd8,
	0xd5, 0xb8, 0x37, 0xf7, 0x16, 0x57, 0xe2, 0x2e, 0xb7, 0xbd, 0xfc, 0xdc, 0x19, 0x71, 0x68, 0x22,
	0x42, 0x50, 0xa9, 0xcf, 0x25, 0x9f, 0xce, 0xbd, 0x45, 0x5a, 0x5a, 0x76, 0x99, 0xe0, 0xfe, 0x98,
	0x89, 0xec, 0x1d, 0x62, 0xf7, 0x2f, 0xc6, 0xe0, 0xbf, 0x91, 0x61, 0x93, 0x0e, 0x9e, 0xc9, 0x30,
	0x0f, 0x13, 0x08, 0x5e, 0xaa, 0x1f, 0x62, 0x53, 0x4c, 0x21, 0x7c, 0x6a, 0xa4, 0x39, 0x31, 0xbf,
	0xc3, 0xe2, 0x40, 0x95, 0x62, 0x01, 0x02, 0x44, 0x1b, 0x3a, 0x90, 0x21, 0x16, 0xe2, 0x0c, 0xe2,
	0x2d, 0x29, 0xbd, 0xd7, 0x86, 0x45, 0x19, 0xc1, 0x6c, 0x94, 0xd3, 0x12, 0x39, 0xc4, 0xfa, 0x58,
	0xd7, 0xa4, 0xb5, 0x7d, 0x41, 0x52, 0x0e, 0x27, 0xde, 0x40, 0x48, 0x4a, 0xb5, 0xca, 0x79, 0xf6,
	0x47, 0x27, 0xaa, 0x48, 0x2f, 0xad, 0x68, 0x52, 0x5a, 0x76, 0x99, 0xe0, 0x41, 0x2f, 0xdf, 0xb1,
	0x58, 0x43, 0xba, 0x59, 0x0f, 0xfa, 0x8f, 0xe7, 0xd1, 0xb6, 0x05, 0x5e, 0x5f, 0x6c, 0x74, 0x8f,
	0xff, 0x23, 0x2d, 0xb3, 0xc9, 0x2e, 0xb2, 0xd3, 0xaf, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x22,
	0xa2, 0x6c, 0x07, 0x95, 0x01, 0x00, 0x00,
}
