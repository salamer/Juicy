# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import command_pb2 as commandpb_dot_command__pb2


class DBCommandStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CommandRPC = channel.unary_unary(
        '/Juicy.DBCommand/CommandRPC',
        request_serializer=commandpb_dot_command__pb2.CommandReq.SerializeToString,
        response_deserializer=commandpb_dot_command__pb2.CommandResp.FromString,
        )


class DBCommandServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CommandRPC(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DBCommandServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CommandRPC': grpc.unary_unary_rpc_method_handler(
          servicer.CommandRPC,
          request_deserializer=commandpb_dot_command__pb2.CommandReq.FromString,
          response_serializer=commandpb_dot_command__pb2.CommandResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Juicy.DBCommand', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
